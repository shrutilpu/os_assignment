#include<stdio.h>
#include<conio.h>
int main() 
{ 
// P0, P1, P2, P3, P4 are the Process  
  
    int n, m, i, j, k; 
    n=5; // Number of process
    m=4; // Number of resources 
    int allocate[5][4] = { { 0, 0, 1,2}, // P0    // Allocation Matrix 
                        { 1, 0, 0,0 }, // P1 
                        { 1, 3, 5,4 }, // P2 
                        { 0, 6, 3,2 }, // P3 
                        { 0, 0, 1,4 } }; // P4 
  
    int max[5][4] = { { 0, 0, 1,2 }, // P0    // MAX Matrix 
                      { 1, 7, 5,0 }, // P1 
                      { 2, 5, 3,6 }, // P2 
                      { 0, 6, 5,2 }, // P3 
                      { 0,6,5,6 } }; // P4 
  
    int avail[4] = { 1, 5, 2,0 }; // Available Resources 
  
    int finish[n], p[n], ind = 0; 
    for (k = 0; k < n; k++) { 
        finish[k] = 0; 
    } 
    int need[n][m]; //calculating need
    for (i = 0; i < n; i++) { 
        for (j = 0; j < m; j++) 
            need[i][j] = max[i][j] - allocate[i][j]; 
    } 
    for (k = 0; k < 5; k++) { 
        for (i = 0; i < n; i++) { 
            if (finish[i] == 0) { 
  
                int flag = 0; 
                for (j = 0; j < m; j++) { 
                    if (need[i][j] > avail[j]){ 
                        flag = 1; 
                         break; 
                    } 
                } 
  
                if (flag == 0) { 
                    p[ind++] = i; 
                    for (int y = 0; y < m; y++) 
                       { avail[y] += allocate[i][y]; }
                    f[i] = 1; 
                } 
            } 
        } 
    } 
  
    printf(" The SAFE Sequence Obtained Is\n"); 
    for (i = 0; i < n - 1; i++) 
       { printf(" P%d ->", p[i]); }
    printf(" P%d", p[n - 1]); 
  } 
